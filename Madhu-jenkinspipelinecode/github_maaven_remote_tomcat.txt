pipeline {
   agent any

   tools {
      // Install the Maven version configured as "M3" and add it to the path.
      maven "maven"
   }

   stages {
      stage('getscm') {
         steps {
            // Get some code from a GitHub repository
git credentialsId: 'github_credentials', url: 'https://github.com/jmstechhome/spring3-mvc-maven-xml-hello-world.git'
          
         }
      }
         
         stage('build'){
             
             steps{
                  
            sh "mvn package"
             }
         }
         
         stage('deploy') {
             steps{
                 withCredentials([usernameColonPassword(credentialsId: 'tomcat_credentials', variable: 'tomcat_cred')]) {
                 sh "curl -v -u ${tomcat_cred} -T /var/lib/jenkins/workspace/pipleine-maven/target/spring3-mvc-maven-xml-hello-world-3.0-SNAPSHOT.war 'http://ec2-13-235-0-252.ap-south-1.compute.amazonaws.com:8080/manager/text/deploy?path=/pipeline_example&update=true'"
               
             }
             }
         }
   }
       post {
        failure {
            script {
                currentBuild.result = 'FAILURE'
            }
        }

        always {
            step([$class: 'Mailer',
                notifyEveryUnstableBuild: true,
                recipients: "ybmadhu404@gmail.com",
                sendToIndividuals: true])
        }
    }
}

aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 397715291001.dkr.ecr.ap-south-1.amazonaws.com

397715291001.dkr.ecr.ap-south-1.amazonaws.com/nodeapp
docker login -u AWS 397715291001.dkr.ecr.ap-south-1.amazonaws.com


=/home/ec2-user/jenkins_home/


export CATALINA_OPTS="-DJENKINS_HOME= -Xmx512m"

<Environment name="JENKINS_HOME" value="/home/ec2-user/jenkins_home/.jenkins" type="java.lang.String"/>

 cd /var/lib/tomcat8/webapps/manager/META-INF/

sudo chown jenkins /home/ec2-user/jenkins_home
sudo chmod u+w /home/ec2-user/jenkins_home


sudo mkdir /usr/share/tomcat8/.jenkins
sudo chmod ugo+rwx /usr/share/tomcat8/.jenkins

HEALTHCHECK
ONBUILD --> good option

EXPOSE
ARG
ENV

docker link

assignment

volumes

private repository
nexus repository




















