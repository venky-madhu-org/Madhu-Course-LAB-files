pipeline {
   agent any
   environment 
    {
        VERSION = "${BUILD_NUMBER}"
        PROJECT = 'nodeapp'
        IMAGE = "$PROJECT:$VERSION"
        ECRURL = 'https://215895321072.dkr.ecr.ap-south-1.amazonaws.com/$PROJECT'
		ECRCRED = 'ecr:ap-south-1:awscredentials'
    }   
    stages {
      stage('GetSCM') {

         steps {

               git credentialsId: 'github_credentials', url: 'https://github.com/jmstechhome8/web_login_automation.git'
         }
         }
         stage('Image Build'){
             steps{
                 script{
                       docker.build('$IMAGE')
                 }
             }
         }
         stage('Push Image'){
         steps{
             script
                {
                    docker.withRegistry(ECRURL, ECRCRED)
                    {
                        docker.image(IMAGE).push()
                    }
                }
            }
         }
    }
    post
    {
        always
        {
            // make sure that the Docker image is removed

            sh "docker rmi $IMAGE | true"
        }
    }
}




pipeline {
   agent any
    tools {
      terraform "terraform"
   }
   environment 
    {
        VERSION = "${BUILD_NUMBER}"
        REPO_NAME = 'nodeapp'
        ECR_URL = "https://215895321072.dkr.ecr.ap-south-1.amazonaws.com"
        REPO_URL = "215895321072.dkr.ecr.ap-south-1.amazonaws.com/$REPO_NAME"
        IMAGE = "215895321072.dkr.ecr.ap-south-1.amazonaws.com/$REPO_NAME:$VERSION"
       //ECRURL = 'https://215895321072.dkr.ecr.ap-south-1.amazonaws.com/nodeapp'
    }   

   stages {
      stage('getscm') {
         steps {
               git credentialsId: 'github_credentials', url: 'https://github.com/jmstechhome8/web_login_automation.git'
         }
      }
         stage('build'){
           steps{
                script{
                       docker.build('$IMAGE')
                 }            
                }
         }
         stage('ecr login'){
         steps{
            
        script{
           sh 'aws ecr get-login --no-include-email --region ap-south-1 | awk '{printf $6}' | docker login -u AWS --password-stdin ${ECR_URL}'
            }
         }
         }
         stage('Push Image'){
         steps{
             script
                {
                        docker.image(IMAGE).push()
                    
                }
            }
         }
		 stage('terraform init'){
         steps{
             sh "cd devops/ && terraform init"
            }
         }
         stage('apply') {
             steps{
                    sh 'terraform apply -var="tag=$VERSION" --auto-approve'
             }
             }
			 
         }
}
         











pipeline {
   agent any
    tools {
      terraform "terraform"
   }
   environment 
    {
        VERSION = "${BUILD_NUMBER}"
        PROJECT = 'nodeapp'
        IMAGE = "$PROJECT:$VERSION"
        ECRURL = 'https://215895321072.dkr.ecr.ap-south-1.amazonaws.com/nodeapp'
    }   

   stages {
      stage('getscm') {
         steps {
               git credentialsId: 'github_credentials', url: 'https://github.com/jmstechhome8/web_login_automation.git'
         }
      }
         stage('build'){
           steps{
                script{
                       docker.build('$IMAGE')
                 }            
                }
         }
         stage('Push Image'){
         steps{
             script
                {
                        docker.image(IMAGE).push()
                    
                }
            }
         }
		 stage('terraform init'){
         steps{
             sh "cd devops/ && terraform init"
            }
         }
         stage('apply') {
             steps{
                    sh "terraform apply -var="tag=$VERSION" --auto-approve"
             }
             }
			 
         }
   }

aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 215895321072.dkr.ecr.ap-south-1.amazonaws.com/nodeapp


https://www.tikalk.com/posts/2017/07/14/implementing-ecr-in-jenkins-declarative-pipeline/


terraform {
  backend "s3" {
    bucket = "jms-terraform-backend"
    key    = "jmsth_jenkins.tfstate"
    region = "ap-south-1"
    encrypt = true
    dynamodb_table = "terraform-state-lock-dynamo"
    }
  }
